// Begin CVS Header
//   $Source: /fs/turing/cvs/copasi_dev/copasi/MIRIAM/WebServicesIssues/soapMiriamWebServicesSoapBindingProxy.h,v $
//   $Revision: 1.4 $
//   $Name: Build-31 $
//   $Author: shoops $
//   $Date: 2009/04/21 16:17:18 $
// End CVS Header

// Copyright (C) 2008 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc., EML Research, gGmbH, University of Heidelberg,
// and The University of Manchester.
// All rights reserved.

/* soapMiriamWebServicesSoapBindingProxy.h
   Generated by gSOAP 2.7.12 from MIRIAM.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
 */

#ifndef soapMiriamWebServicesSoapBindingProxy_H
#define soapMiriamWebServicesSoapBindingProxy_H
#include "soapH.h"

class SOAP_CMAC MiriamWebServicesSoapBindingProxy : public soap
{
public:
  /// Endpoint URL of service 'MiriamWebServicesSoapBindingProxy' (change as needed)
  const char *soap_endpoint;
  /// Constructor
  MiriamWebServicesSoapBindingProxy();
  /// Constructor with copy of another engine state
  MiriamWebServicesSoapBindingProxy(const struct soap&);
  /// Constructor with engine input+output mode control
  MiriamWebServicesSoapBindingProxy(soap_mode iomode);
  /// Constructor with engine input and output mode control
  MiriamWebServicesSoapBindingProxy(soap_mode imode, soap_mode omode);
  /// Destructor frees deserialized data
  virtual ~MiriamWebServicesSoapBindingProxy();
  /// Initializer used by constructor
  virtual void MiriamWebServicesSoapBindingProxy_init(soap_mode imode, soap_mode omode);
  /// Disables and removes SOAP Header from message
  virtual void soap_noheader();
  /// Get SOAP Fault structure (NULL when absent)
  virtual const SOAP_ENV__Fault *soap_fault();
  /// Get SOAP Fault string (NULL when absent)
  virtual const char *soap_fault_string();
  /// Get SOAP Fault detail as string (NULL when absent)
  virtual const char *soap_fault_detail();
  /// Force close connection (normally automatic, except for send_X ops)
  virtual int soap_close_socket();
  /// Print fault
  virtual void soap_print_fault(FILE*);
#ifndef WITH_LEAN
  /// Print fault to stream
  virtual void soap_stream_fault(std::ostream&);
  /// Put fault into buffer
  virtual char *soap_sprint_fault(char *buf, size_t len);
#endif

  /// Web service operation 'getName' (returns error code or SOAP_OK)
  virtual int getName(std::string _uri, std::string &_getNameReturn);

  /// Web service operation 'getLocation' (returns error code or SOAP_OK)
  virtual int getLocation(std::string _uri, std::string _resource, std::string &_getLocationReturn);

  /// Web service operation 'getURI' (returns error code or SOAP_OK)
  virtual int getURI(std::string _name, std::string _id, std::string &_getURIReturn);

  /// Web service operation 'getDataResources' (returns error code or SOAP_OK)
  virtual int getDataResources(std::string _nickname, struct ns2__getDataResourcesResponse &_param_1);

  /// Web service operation 'getServicesInfo' (returns error code or SOAP_OK)
  virtual int getServicesInfo(std::string &getServicesInfoReturn);

  /// Web service operation 'getServicesVersion' (returns error code or SOAP_OK)
  virtual int getServicesVersion(std::string &getServicesVersionReturn);

  /// Web service operation 'getJavaLibraryVersion' (returns error code or SOAP_OK)
  virtual int getJavaLibraryVersion(std::string &getJavaLibraryVersionReturn);

  /// Web service operation 'getDataTypeURI' (returns error code or SOAP_OK)
  virtual int getDataTypeURI(std::string _name, std::string &_getDataTypeURIReturn);

  /// Web service operation 'getDataTypeURIs' (returns error code or SOAP_OK)
  virtual int getDataTypeURIs(std::string _name, struct ns2__getDataTypeURIsResponse &_param_2);

  /// Web service operation 'getDataTypeDef' (returns error code or SOAP_OK)
  virtual int getDataTypeDef(std::string _nickname, std::string &_getDataTypeDefReturn);

  /// Web service operation 'getLocations' (returns error code or SOAP_OK)
  virtual int getLocations(std::string _nickname, std::string _id, struct ns2__getLocationsResponse &_param_3);

  /// Web service operation 'getLocations' (returns error code or SOAP_OK)
  virtual int getLocations_(std::string _nickname, std::string _id, struct ns2__getLocationsResponse_ &_param_4);

  /// Web service operation 'isDeprecated' (returns error code or SOAP_OK)
  virtual int isDeprecated(std::string _uri, std::string &_isDeprecatedReturn);

  /// Web service operation 'getOfficialDataTypeURI' (returns error code or SOAP_OK)
  virtual int getOfficialDataTypeURI(std::string _uri, std::string &_getOfficialDataTypeURIReturn);

  /// Web service operation 'getMiriamURI' (returns error code or SOAP_OK)
  virtual int getMiriamURI(std::string _uri, std::string &_getMiriamURIReturn);

  /// Web service operation 'getDataTypePattern' (returns error code or SOAP_OK)
  virtual int getDataTypePattern(std::string _nickname, std::string &_getDataTypePatternReturn);

  /// Web service operation 'getResourceInfo' (returns error code or SOAP_OK)
  virtual int getResourceInfo(std::string _id, std::string &_getResourceInfoReturn);

  /// Web service operation 'getResourceInstitution' (returns error code or SOAP_OK)
  virtual int getResourceInstitution(std::string _id, std::string &_getResourceInstitutionReturn);

  /// Web service operation 'getResourceLocation' (returns error code or SOAP_OK)
  virtual int getResourceLocation(std::string _id, std::string &_getResourceLocationReturn);

  /// Web service operation 'getDataTypeSynonyms' (returns error code or SOAP_OK)
  virtual int getDataTypeSynonyms(std::string _name, struct ns2__getDataTypeSynonymsResponse &_param_5);

  /// Web service operation 'getNames' (returns error code or SOAP_OK)
  virtual int getNames(std::string _uri, struct ns2__getNamesResponse &_param_6);

  /// Web service operation 'getDataTypesName' (returns error code or SOAP_OK)
  virtual int getDataTypesName(struct ns2__getDataTypesNameResponse &_param_7);

  /// Web service operation 'getDataTypesId' (returns error code or SOAP_OK)
  virtual int getDataTypesId(struct ns2__getDataTypesIdResponse &_param_8);

  /// Web service operation 'checkRegExp' (returns error code or SOAP_OK)
  virtual int checkRegExp(std::string _identifier, std::string _datatype, std::string &_checkRegExpReturn);
};
#endif
