!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AR	Makefile	/^AR            = ar cqs$/;"	m
AR	demoUiXml-build-desktop/Makefile	/^AR            = ar cqs$/;"	m
AR	iGaME-build-desktop/Makefile	/^AR            = ar cqs$/;"	m
BEGIN	demoUi/demoUiXml.cpp	/^BEGIN(demoUiXml)$/;"	f	signature:(demoUiXml)
BEGIN_EVENTS	demoUi/demoUiXml.cpp	/^BEGIN_EVENTS(demoUiXml)$/;"	f	signature:(demoUiXml)
CC	Makefile	/^CC            = gcc$/;"	m
CC	demoUiXml-build-desktop/Makefile	/^CC            = gcc$/;"	m
CC	iGaME-build-desktop/Makefile	/^CC            = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS        = -pipe -O2 -D_REENTRANT $(DEFINES)$/;"	m
CFLAGS	demoUiXml-build-desktop/Makefile	/^CFLAGS        = -pipe -O2 -D_REENTRANT $(DEFINES)$/;"	m
CFLAGS	iGaME-build-desktop/Makefile	/^CFLAGS        = -pipe -g -D_REENTRANT $(DEFINES)$/;"	m
CHK_DIR_EXISTS	Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
CHK_DIR_EXISTS	demoUiXml-build-desktop/Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
CHK_DIR_EXISTS	iGaME-build-desktop/Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
COMPRESS	Makefile	/^COMPRESS      = gzip -9f$/;"	m
COMPRESS	demoUiXml-build-desktop/Makefile	/^COMPRESS      = gzip -9f$/;"	m
COMPRESS	iGaME-build-desktop/Makefile	/^COMPRESS      = gzip -9f$/;"	m
COPY	Makefile	/^COPY          = cp -f$/;"	m
COPY	demoUiXml-build-desktop/Makefile	/^COPY          = cp -f$/;"	m
COPY	iGaME-build-desktop/Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	Makefile	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_DIR	demoUiXml-build-desktop/Makefile	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_DIR	iGaME-build-desktop/Makefile	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_FILE	Makefile	/^COPY_FILE     = $(COPY)$/;"	m
COPY_FILE	demoUiXml-build-desktop/Makefile	/^COPY_FILE     = $(COPY)$/;"	m
COPY_FILE	iGaME-build-desktop/Makefile	/^COPY_FILE     = $(COPY)$/;"	m
CXX	Makefile	/^CXX           = g++$/;"	m
CXX	demoUiXml-build-desktop/Makefile	/^CXX           = g++$/;"	m
CXX	iGaME-build-desktop/Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS      = -pipe -O2 -D_REENTRANT $(DEFINES)$/;"	m
CXXFLAGS	demoUiXml-build-desktop/Makefile	/^CXXFLAGS      = -pipe -O2 -D_REENTRANT $(DEFINES)$/;"	m
CXXFLAGS	iGaME-build-desktop/Makefile	/^CXXFLAGS      = -pipe -g -D_REENTRANT $(DEFINES)$/;"	m
DEFINES	Makefile	/^DEFINES       = -DQT_NO_DEBUG -DQT_XML_LIB -DQT_GUI_LIB -DQT_CORE_LIB$/;"	m
DEFINES	demoUiXml-build-desktop/Makefile	/^DEFINES       = -DQT_NO_DEBUG -DQT_XML_LIB -DQT_GUI_LIB -DQT_CORE_LIB$/;"	m
DEFINES	iGaME-build-desktop/Makefile	/^DEFINES       = -DQT_XML_LIB -DQT_GUI_LIB -DQT_CORE_LIB$/;"	m
DEL_DIR	Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_DIR	demoUiXml-build-desktop/Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_DIR	iGaME-build-desktop/Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	Makefile	/^DEL_FILE      = rm -f$/;"	m
DEL_FILE	demoUiXml-build-desktop/Makefile	/^DEL_FILE      = rm -f$/;"	m
DEL_FILE	iGaME-build-desktop/Makefile	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	Makefile	/^DESTDIR       = $/;"	m
DESTDIR	demoUiXml-build-desktop/Makefile	/^DESTDIR       = $/;"	m
DESTDIR	iGaME-build-desktop/Makefile	/^DESTDIR       = $/;"	m
DIST	Makefile	/^DIST          = \/usr\/local\/Trolltech\/Qt-4.7.0\/mkspecs\/common\/g++.conf \\$/;"	m
DIST	demoUiXml-build-desktop/Makefile	/^DIST          = \/usr\/local\/Trolltech\/Qt-4.7.0\/mkspecs\/common\/g++.conf \\$/;"	m
DIST	iGaME-build-desktop/Makefile	/^DIST          = \/usr\/local\/Trolltech\/Qt-4.7.0\/mkspecs\/common\/g++.conf \\$/;"	m
INCPATH	Makefile	/^INCPATH       = -I\/usr\/local\/Trolltech\/Qt-4.7.0\/mkspecs\/linux-g++ -I. -I\/usr\/local\/Trolltech\/Qt-4.7.0\/include\/QtCore -I\/usr\/local\/Trolltech\/Qt-4.7.0\/include\/QtGui -I\/usr\/local\/Trolltech\/Qt-4.7.0\/include\/QtXml -I\/usr\/local\/Trolltech\/Qt-4.7.0\/include -I.$/;"	m
INCPATH	demoUiXml-build-desktop/Makefile	/^INCPATH       = -I\/usr\/local\/Trolltech\/Qt-4.7.0\/mkspecs\/linux-g++ -I..\/igameUiMort -I\/usr\/local\/Trolltech\/Qt-4.7.0\/include\/QtCore -I\/usr\/local\/Trolltech\/Qt-4.7.0\/include\/QtGui -I\/usr\/local\/Trolltech\/Qt-4.7.0\/include\/QtXml -I\/usr\/local\/Trolltech\/Qt-4.7.0\/include -I. -I..\/igameUiMort -I.$/;"	m
INCPATH	iGaME-build-desktop/Makefile	/^INCPATH       = -I\/usr\/local\/Trolltech\/Qt-4.7.0\/mkspecs\/linux-g++ -I..\/igameUiMort -I\/usr\/local\/Trolltech\/Qt-4.7.0\/include\/QtCore -I\/usr\/local\/Trolltech\/Qt-4.7.0\/include\/QtGui -I\/usr\/local\/Trolltech\/Qt-4.7.0\/include\/QtXml -I\/usr\/local\/Trolltech\/Qt-4.7.0\/include -I. -I..\/igameUiMort -I.$/;"	m
INSTALL_DIR	Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_DIR	demoUiXml-build-desktop/Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_DIR	iGaME-build-desktop/Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_FILE	Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_FILE	demoUiXml-build-desktop/Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_FILE	iGaME-build-desktop/Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
INSTALL_PROGRAM	demoUiXml-build-desktop/Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
INSTALL_PROGRAM	iGaME-build-desktop/Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
LFLAGS	Makefile	/^LFLAGS        = -Wl,-O1 -Wl,-rpath,\/usr\/local\/Trolltech\/Qt-4.7.0\/lib$/;"	m
LFLAGS	demoUiXml-build-desktop/Makefile	/^LFLAGS        = -Wl,-O1 -Wl,-rpath,\/usr\/local\/Trolltech\/Qt-4.7.0\/lib$/;"	m
LFLAGS	iGaME-build-desktop/Makefile	/^LFLAGS        = -Wl,-rpath,\/usr\/local\/Trolltech\/Qt-4.7.0\/lib$/;"	m
LIBS	Makefile	/^LIBS          = $(SUBLIBS)  -L\/usr\/local\/Trolltech\/Qt-4.7.0\/lib -lQtXml -lQtGui -lQtCore -lpthread $/;"	m
LIBS	demoUiXml-build-desktop/Makefile	/^LIBS          = $(SUBLIBS)  -L\/usr\/local\/Trolltech\/Qt-4.7.0\/lib -lQtXml -lQtGui -lQtCore -lpthread $/;"	m
LIBS	iGaME-build-desktop/Makefile	/^LIBS          = $(SUBLIBS)  -L\/usr\/local\/Trolltech\/Qt-4.7.0\/lib -lQtXml -lQtGui -lQtCore -lpthread $/;"	m
LINK	Makefile	/^LINK          = g++$/;"	m
LINK	demoUiXml-build-desktop/Makefile	/^LINK          = g++$/;"	m
LINK	iGaME-build-desktop/Makefile	/^LINK          = g++$/;"	m
MItem	MItem.cpp	/^MItem::MItem()$/;"	f	class:MItem	signature:()
MItem	MItem.h	/^    MItem();$/;"	p	class:MItem	access:public	signature:()
MItem	MItem.h	/^class MItem : public QGraphicsItem {$/;"	c	inherits:QGraphicsItem
MItem::MItem	MItem.cpp	/^MItem::MItem()$/;"	f	class:MItem	signature:()
MItem::MItem	MItem.h	/^    MItem();$/;"	p	class:MItem	access:public	signature:()
MItem::alternativeFigure	MItem.h	/^    QString alternativeFigure() { return m_alternativeFigure; }$/;"	f	class:MItem	access:public	signature:()
MItem::alternativeFigureColor	MItem.h	/^    QColor alternativeFigureColor() { return m_alternativeFigureColor; }$/;"	f	class:MItem	access:public	signature:()
MItem::alternativeImage	MItem.h	/^    QString alternativeImage() { return m_alternativeImage; }$/;"	f	class:MItem	access:public	signature:()
MItem::alternativePixmap	MItem.h	/^    QString alternativePixmap() { return m_alternativePixmap; }$/;"	f	class:MItem	access:public	signature:()
MItem::alternativeText	MItem.h	/^    QString alternativeText() { return m_alternativeText; }$/;"	f	class:MItem	access:public	signature:()
MItem::alternativeTextColor	MItem.h	/^    QColor alternativeTextColor() { return m_alternativeTextColor; }$/;"	f	class:MItem	access:public	signature:()
MItem::alternativeTextFont	MItem.h	/^    QFont alternativeTextFont() { return m_alternativeTextFont; }$/;"	f	class:MItem	access:public	signature:()
MItem::boundingRect	MItem.cpp	/^QRectF MItem::boundingRect() const$/;"	f	class:MItem	signature:() const
MItem::boundingRect	MItem.h	/^    QRectF boundingRect() const;$/;"	p	class:MItem	access:public	signature:() const
MItem::category	MItem.h	/^    QString category() { return m_category; }$/;"	f	class:MItem	access:public	signature:()
MItem::color	MItem.h	/^    QColor color() { return m_color; }$/;"	f	class:MItem	access:public	signature:()
MItem::figure	MItem.h	/^    QString figure() { return m_figure; }$/;"	f	class:MItem	access:public	signature:()
MItem::figureColor	MItem.h	/^    QColor figureColor() { return m_figureColor; }$/;"	f	class:MItem	access:public	signature:()
MItem::height	MItem.h	/^    qreal height() { return m_height; }$/;"	f	class:MItem	access:public	signature:()
MItem::id	MItem.h	/^    QString id() { return m_id; }$/;"	f	class:MItem	access:public	signature:()
MItem::image	MItem.h	/^    QString image() { return m_image; }$/;"	f	class:MItem	access:public	signature:()
MItem::isAlternativeFigureAvailable	MItem.h	/^    bool isAlternativeFigureAvailable() { return m_isAlternativeFigureAvailable; }$/;"	f	class:MItem	access:public	signature:()
MItem::isAlternativeImageAvailable	MItem.h	/^    bool isAlternativeImageAvailable() { return m_isAlternativeImageAvailable; }$/;"	f	class:MItem	access:public	signature:()
MItem::isAlternativePixmapAvailable	MItem.h	/^    bool isAlternativePixmapAvailable() { return m_isAlternativePixmapAvailable; }$/;"	f	class:MItem	access:public	signature:()
MItem::isAlternativeTextAvailable	MItem.h	/^    bool isAlternativeTextAvailable() { return m_isAlternativeTextAvailable; }$/;"	f	class:MItem	access:public	signature:()
MItem::isFigureVisible	MItem.h	/^    bool isFigureVisible() { return m_isFigureVisible; }$/;"	f	class:MItem	access:public	signature:()
MItem::isImageVisible	MItem.h	/^    bool isImageVisible() { return m_isImageVisible; }$/;"	f	class:MItem	access:public	signature:()
MItem::isMouseOverSelectable	MItem.h	/^    bool isMouseOverSelectable() { return m_isMouseOverSelectable; }$/;"	f	class:MItem	access:public	signature:()
MItem::isMovable	MItem.h	/^    bool isMovable() { return m_isMovable; }$/;"	f	class:MItem	access:public	signature:()
MItem::isOutlineAvailable	MItem.h	/^    bool isOutlineAvailable() { return m_isOutlineAvailable; }$/;"	f	class:MItem	access:public	signature:()
MItem::isPixmapVisible	MItem.h	/^    bool isPixmapVisible() { return m_isPixmapVisible; }$/;"	f	class:MItem	access:public	signature:()
MItem::isSelectable	MItem.h	/^    bool isSelectable() { return m_isSelectable; }$/;"	f	class:MItem	access:public	signature:()
MItem::isTextVisible	MItem.h	/^    bool isTextVisible() { return m_isTextVisible; }$/;"	f	class:MItem	access:public	signature:()
MItem::itemChange	MItem.cpp	/^QVariant MItem::itemChange(QGraphicsItem::GraphicsItemChange change, const QVariant& value)$/;"	f	class:MItem	signature:(QGraphicsItem::GraphicsItemChange change, const QVariant& value)
MItem::itemChange	MItem.h	/^    QVariant itemChange(QGraphicsItem::GraphicsItemChange change, const QVariant& value);$/;"	p	class:MItem	access:protected	signature:(QGraphicsItem::GraphicsItemChange change, const QVariant& value)
MItem::m_alternativeFigure	MItem.h	/^    QString m_alternativeFigure;$/;"	m	class:MItem	access:private
MItem::m_alternativeFigureColor	MItem.h	/^    QColor m_alternativeFigureColor;$/;"	m	class:MItem	access:private
MItem::m_alternativeImage	MItem.h	/^    QString m_alternativeImage;$/;"	m	class:MItem	access:private
MItem::m_alternativePixmap	MItem.h	/^    QString m_alternativePixmap;$/;"	m	class:MItem	access:private
MItem::m_alternativeText	MItem.h	/^    QString m_alternativeText;$/;"	m	class:MItem	access:private
MItem::m_alternativeTextColor	MItem.h	/^    QColor m_alternativeTextColor;$/;"	m	class:MItem	access:private
MItem::m_alternativeTextFont	MItem.h	/^    QFont m_alternativeTextFont;$/;"	m	class:MItem	access:private
MItem::m_category	MItem.h	/^    QString m_category;$/;"	m	class:MItem	access:private
MItem::m_color	MItem.h	/^    QColor m_color;$/;"	m	class:MItem	access:private
MItem::m_figure	MItem.h	/^    QString m_figure;$/;"	m	class:MItem	access:private
MItem::m_figureColor	MItem.h	/^    QColor m_figureColor;$/;"	m	class:MItem	access:private
MItem::m_height	MItem.h	/^    qreal m_height;$/;"	m	class:MItem	access:private
MItem::m_id	MItem.h	/^    QString m_id;$/;"	m	class:MItem	access:private
MItem::m_image	MItem.h	/^    QString m_image;$/;"	m	class:MItem	access:private
MItem::m_isAlternativeFigureAvailable	MItem.h	/^    bool m_isAlternativeFigureAvailable;$/;"	m	class:MItem	access:private
MItem::m_isAlternativeImageAvailable	MItem.h	/^    bool m_isAlternativeImageAvailable;$/;"	m	class:MItem	access:private
MItem::m_isAlternativePixmapAvailable	MItem.h	/^    bool m_isAlternativePixmapAvailable;$/;"	m	class:MItem	access:private
MItem::m_isAlternativeTextAvailable	MItem.h	/^    bool m_isAlternativeTextAvailable;$/;"	m	class:MItem	access:private
MItem::m_isFigureVisible	MItem.h	/^    bool m_isFigureVisible;$/;"	m	class:MItem	access:private
MItem::m_isImageVisible	MItem.h	/^    bool m_isImageVisible;$/;"	m	class:MItem	access:private
MItem::m_isMouseOverSelectable	MItem.h	/^    bool m_isMouseOverSelectable;$/;"	m	class:MItem	access:private
MItem::m_isMovable	MItem.h	/^    bool m_isMovable;$/;"	m	class:MItem	access:private
MItem::m_isOutlineAvailable	MItem.h	/^    bool m_isOutlineAvailable;$/;"	m	class:MItem	access:private
MItem::m_isPixmapVisible	MItem.h	/^    bool m_isPixmapVisible;$/;"	m	class:MItem	access:private
MItem::m_isSelectable	MItem.h	/^    bool m_isSelectable;$/;"	m	class:MItem	access:private
MItem::m_isTextVisible	MItem.h	/^    bool m_isTextVisible;$/;"	m	class:MItem	access:private
MItem::m_margin	MItem.h	/^    qreal m_margin;$/;"	m	class:MItem	access:private
MItem::m_name	MItem.h	/^    QString m_name;$/;"	m	class:MItem	access:private
MItem::m_outlineColor	MItem.h	/^    QColor m_outlineColor;$/;"	m	class:MItem	access:private
MItem::m_outlineStyle	MItem.h	/^    Qt::PenStyle m_outlineStyle;$/;"	m	class:MItem	access:private
MItem::m_outlineWidth	MItem.h	/^    int m_outlineWidth;$/;"	m	class:MItem	access:private
MItem::m_padding	MItem.h	/^    qreal m_padding;$/;"	m	class:MItem	access:private
MItem::m_pixmap	MItem.h	/^    QString m_pixmap;$/;"	m	class:MItem	access:private
MItem::m_text	MItem.h	/^    QString m_text;$/;"	m	class:MItem	access:private
MItem::m_textColor	MItem.h	/^    QColor m_textColor;$/;"	m	class:MItem	access:private
MItem::m_textFont	MItem.h	/^    QFont m_textFont;$/;"	m	class:MItem	access:private
MItem::m_width	MItem.h	/^    qreal m_width;$/;"	m	class:MItem	access:private
MItem::margin	MItem.h	/^    qreal margin() { return m_margin; }$/;"	f	class:MItem	access:public	signature:()
MItem::name	MItem.h	/^    QString name() { return m_name; }$/;"	f	class:MItem	access:public	signature:()
MItem::outlineColor	MItem.h	/^    QColor outlineColor() { return m_outlineColor; }$/;"	f	class:MItem	access:public	signature:()
MItem::outlineRect	MItem.cpp	/^QRectF MItem::outlineRect() const$/;"	f	class:MItem	signature:() const
MItem::outlineRect	MItem.h	/^    QRectF outlineRect() const;$/;"	p	class:MItem	access:public	signature:() const
MItem::outlineStyle	MItem.h	/^    Qt::PenStyle outlineStyle() { return m_outlineStyle; }$/;"	f	class:MItem	access:public	signature:()
MItem::outlineWidth	MItem.h	/^    int outlineWidth() { return m_outlineWidth; }$/;"	f	class:MItem	access:public	signature:()
MItem::padding	MItem.h	/^    qreal padding() { return m_padding; }$/;"	f	class:MItem	access:public	signature:()
MItem::paint	MItem.cpp	/^void MItem::paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget*)$/;"	f	class:MItem	signature:(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget*)
MItem::paint	MItem.h	/^    void paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget);$/;"	p	class:MItem	access:public	signature:(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget)
MItem::painter	MItem.h	/^    QPainter* painter();$/;"	p	class:MItem	access:public	signature:()
MItem::painter	MItemPainter.hxx	/^QPainter* MItem::painter()$/;"	f	class:MItem	signature:()
MItem::pixmap	MItem.h	/^    QString pixmap() { return m_pixmap; }$/;"	f	class:MItem	access:public	signature:()
MItem::renew	MItem.cpp	/^void MItem::renew()$/;"	f	class:MItem	signature:()
MItem::renew	MItem.h	/^    void renew();$/;"	p	class:MItem	access:public	signature:()
MItem::setAlternativeFigure	MItem.h	/^    void setAlternativeFigure(QString alternativeFigure) { m_alternativeFigure = alternativeFigure; setAlternativeFigureAvailable(true); }$/;"	f	class:MItem	access:public	signature:(QString alternativeFigure)
MItem::setAlternativeFigureAvailable	MItem.h	/^    void setAlternativeFigureAvailable(bool isAlternativeFigureAvailable) { m_isAlternativeFigureAvailable = isAlternativeFigureAvailable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isAlternativeFigureAvailable)
MItem::setAlternativeFigureColor	MItem.h	/^    void setAlternativeFigureColor(QColor alternativeFigureColor) { m_alternativeFigureColor = alternativeFigureColor; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QColor alternativeFigureColor)
MItem::setAlternativeImage	MItem.h	/^    void setAlternativeImage(QString alternativeImage) { m_alternativeImage = alternativeImage; setAlternativeImageAvailable(true); }$/;"	f	class:MItem	access:public	signature:(QString alternativeImage)
MItem::setAlternativeImageAvailable	MItem.h	/^    void setAlternativeImageAvailable(bool isAlternativeImageAvailable) { m_isAlternativeImageAvailable = isAlternativeImageAvailable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isAlternativeImageAvailable)
MItem::setAlternativePixmap	MItem.h	/^    void setAlternativePixmap(QString alternativePixmap) { m_alternativePixmap = alternativePixmap; setAlternativePixmapAvailable(true); }$/;"	f	class:MItem	access:public	signature:(QString alternativePixmap)
MItem::setAlternativePixmapAvailable	MItem.h	/^    void setAlternativePixmapAvailable(bool isAlternativePixmapAvailable) { m_isAlternativePixmapAvailable = isAlternativePixmapAvailable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isAlternativePixmapAvailable)
MItem::setAlternativeText	MItem.h	/^    void setAlternativeText(QString alternativeText) { m_alternativeText = alternativeText; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QString alternativeText)
MItem::setAlternativeTextAvailable	MItem.h	/^    void setAlternativeTextAvailable(bool isAlternativeTextAvailable) { m_isAlternativeTextAvailable = isAlternativeTextAvailable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isAlternativeTextAvailable)
MItem::setAlternativeTextColor	MItem.h	/^    void setAlternativeTextColor(QColor alternativeTextColor) { m_alternativeTextColor = alternativeTextColor; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QColor alternativeTextColor)
MItem::setAlternativeTextFont	MItem.h	/^    void setAlternativeTextFont(QFont alternativeTextFont) { m_alternativeTextFont = alternativeTextFont; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QFont alternativeTextFont)
MItem::setCategory	MItem.h	/^    void setCategory(QString category) { m_category = category; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QString category)
MItem::setColor	MItem.h	/^    void setColor(QColor color) { m_color = color; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QColor color)
MItem::setFigure	MItem.h	/^    void setFigure(QString figure) { m_figure = figure; setFigureVisible(true); }$/;"	f	class:MItem	access:public	signature:(QString figure)
MItem::setFigureColor	MItem.h	/^    void setFigureColor(QColor figureColor) { m_figureColor = figureColor; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QColor figureColor)
MItem::setFigureVisible	MItem.h	/^    void setFigureVisible(bool isFigureVisible) { m_isFigureVisible = isFigureVisible; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isFigureVisible)
MItem::setHeight	MItem.h	/^    void setHeight(qreal height) { m_height = height; this->renew(); }$/;"	f	class:MItem	access:public	signature:(qreal height)
MItem::setId	MItem.h	/^    void setId(QString id) { m_id = id; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QString id)
MItem::setImage	MItem.h	/^    void setImage(QString image) { m_image = image; setImageVisible(true); }$/;"	f	class:MItem	access:public	signature:(QString image)
MItem::setImageVisible	MItem.h	/^    void setImageVisible(bool isImageVisible) { m_isImageVisible = isImageVisible; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isImageVisible)
MItem::setMargin	MItem.h	/^    void setMargin(qreal margin) { m_margin = margin; this->renew(); }$/;"	f	class:MItem	access:public	signature:(qreal margin)
MItem::setMouseOverSelectable	MItem.h	/^    void setMouseOverSelectable(bool isMouseOverSelectable) { m_isMouseOverSelectable = isMouseOverSelectable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isMouseOverSelectable)
MItem::setMovable	MItem.h	/^    void setMovable(bool isMovable) { m_isMovable = isMovable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isMovable)
MItem::setName	MItem.h	/^    void setName(QString name) { m_name = name; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QString name)
MItem::setOutlineAvailable	MItem.h	/^    void setOutlineAvailable(bool isOutlineAvailable) { m_isOutlineAvailable = isOutlineAvailable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isOutlineAvailable)
MItem::setOutlineColor	MItem.h	/^    void setOutlineColor(QColor outlineColor) { m_outlineColor = outlineColor; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QColor outlineColor)
MItem::setOutlineStyle	MItem.h	/^    void setOutlineStyle(Qt::PenStyle outlineStyle) { m_outlineStyle = outlineStyle; this->renew(); }$/;"	f	class:MItem	access:public	signature:(Qt::PenStyle outlineStyle)
MItem::setOutlineWidth	MItem.h	/^    void setOutlineWidth(int outlineWidth) { m_outlineWidth = outlineWidth; this->renew(); }$/;"	f	class:MItem	access:public	signature:(int outlineWidth)
MItem::setPadding	MItem.h	/^    void setPadding(qreal padding) { m_padding = padding; this->renew(); }$/;"	f	class:MItem	access:public	signature:(qreal padding)
MItem::setPixmap	MItem.h	/^    void setPixmap(QString pixmap) { m_pixmap = pixmap; setPixmapVisible(true); }$/;"	f	class:MItem	access:public	signature:(QString pixmap)
MItem::setPixmapVisible	MItem.h	/^    void setPixmapVisible(bool isPixmapVisible) { m_isPixmapVisible = isPixmapVisible; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isPixmapVisible)
MItem::setSelectable	MItem.h	/^    void setSelectable(bool isSelectable) { m_isSelectable = isSelectable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isSelectable)
MItem::setText	MItem.h	/^    void setText(QString text) { m_text = text; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QString text)
MItem::setTextColor	MItem.h	/^    void setTextColor(QColor textColor) { m_textColor = textColor; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QColor textColor)
MItem::setTextFont	MItem.h	/^    void setTextFont(QFont textFont) { m_textFont = textFont; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QFont textFont)
MItem::setTextVisible	MItem.h	/^    void setTextVisible(bool isTextVisible) { m_isTextVisible = isTextVisible; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isTextVisible)
MItem::setWidth	MItem.h	/^    void setWidth(qreal width) { m_width = width; this->renew(); }$/;"	f	class:MItem	access:public	signature:(qreal width)
MItem::shape	MItem.cpp	/^QPainterPath MItem::shape() const$/;"	f	class:MItem	signature:() const
MItem::shape	MItem.h	/^    QPainterPath shape() const;$/;"	p	class:MItem	access:public	signature:() const
MItem::text	MItem.h	/^    QString text() { return m_text; }$/;"	f	class:MItem	access:public	signature:()
MItem::textColor	MItem.h	/^    QColor textColor() { return m_textColor; }$/;"	f	class:MItem	access:public	signature:()
MItem::textFont	MItem.h	/^    QFont textFont() { return m_textFont; }$/;"	f	class:MItem	access:public	signature:()
MItem::width	MItem.h	/^    qreal width() { return m_width; }$/;"	f	class:MItem	access:public	signature:()
MItem::~MItem	MItem.cpp	/^MItem::~MItem()$/;"	f	class:MItem	signature:()
MItem::~MItem	MItem.h	/^    ~MItem();$/;"	p	class:MItem	access:public	signature:()
MItemPainter_hxx	MItemPainter.hxx	14;"	d
MItem_h	MItem.h	12;"	d
MKDIR	Makefile	/^MKDIR         = mkdir -p$/;"	m
MKDIR	demoUiXml-build-desktop/Makefile	/^MKDIR         = mkdir -p$/;"	m
MKDIR	iGaME-build-desktop/Makefile	/^MKDIR         = mkdir -p$/;"	m
MOVE	Makefile	/^MOVE          = mv -f$/;"	m
MOVE	demoUiXml-build-desktop/Makefile	/^MOVE          = mv -f$/;"	m
MOVE	iGaME-build-desktop/Makefile	/^MOVE          = mv -f$/;"	m
MScene	MScene.cpp	/^MScene::MScene(QObject* parent)$/;"	f	class:MScene	signature:(QObject* parent)
MScene	MScene.h	/^    MScene(QObject* parent = 0);$/;"	p	class:MScene	access:public	signature:(QObject* parent = 0)
MScene	MScene.h	/^class MScene : public QGraphicsScene {$/;"	c	inherits:QGraphicsScene
MScene::MScene	MScene.cpp	/^MScene::MScene(QObject* parent)$/;"	f	class:MScene	signature:(QObject* parent)
MScene::MScene	MScene.h	/^    MScene(QObject* parent = 0);$/;"	p	class:MScene	access:public	signature:(QObject* parent = 0)
MScene::dataCount	MScene.h	/^    int dataCount;$/;"	m	class:MScene	access:public
MScene::dataItem	MScene.h	/^    MItem* dataItem[1024];$/;"	m	class:MScene	access:public
MScene::dataScene	MScene.h	/^    MItem* dataScene;$/;"	m	class:MScene	access:public
MScene::getStaticMetaObject	demoUiXml-build-desktop/moc_MScene.cpp	/^const QMetaObject &MScene::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MScene	signature:()
MScene::getStaticMetaObject	iGaME-build-desktop/moc_MScene.cpp	/^const QMetaObject &MScene::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MScene	signature:()
MScene::loadXml	MScene.cpp	/^void MScene::loadXml(const QString& fileName)$/;"	f	class:MScene	signature:(const QString& fileName)
MScene::loadXml	MScene.h	/^    void loadXml(const QString& fileName); \/\/&$/;"	p	class:MScene	access:public	signature:(const QString& fileName)
MScene::m_maxZValue	MScene.h	/^    qreal m_maxZValue;$/;"	m	class:MScene	access:private
MScene::m_minZValue	MScene.h	/^    qreal m_minZValue;$/;"	m	class:MScene	access:private
MScene::metaObject	demoUiXml-build-desktop/moc_MScene.cpp	/^const QMetaObject *MScene::metaObject() const$/;"	f	class:MScene	signature:() const
MScene::metaObject	iGaME-build-desktop/moc_MScene.cpp	/^const QMetaObject *MScene::metaObject() const$/;"	f	class:MScene	signature:() const
MScene::qt_metacall	demoUiXml-build-desktop/moc_MScene.cpp	/^int MScene::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MScene	signature:(QMetaObject::Call _c, int _id, void **_a)
MScene::qt_metacall	iGaME-build-desktop/moc_MScene.cpp	/^int MScene::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MScene	signature:(QMetaObject::Call _c, int _id, void **_a)
MScene::qt_metacast	demoUiXml-build-desktop/moc_MScene.cpp	/^void *MScene::qt_metacast(const char *_clname)$/;"	f	class:MScene	signature:(const char *_clname)
MScene::qt_metacast	iGaME-build-desktop/moc_MScene.cpp	/^void *MScene::qt_metacast(const char *_clname)$/;"	f	class:MScene	signature:(const char *_clname)
MScene::selectedItem	MScene.cpp	/^MItem* MScene::selectedItem() const$/;"	f	class:MScene	signature:() const
MScene::selectedItem	MScene.h	/^    MItem* selectedItem() const;$/;"	p	class:MScene	access:public	signature:() const
MScene::selectedItemBringToFront	MScene.cpp	/^void MScene::selectedItemBringToFront()$/;"	f	class:MScene	signature:()
MScene::selectedItemBringToFront	MScene.h	/^    void selectedItemBringToFront();$/;"	p	class:MScene	access:public	signature:()
MScene::selectedItemSendToBack	MScene.cpp	/^void MScene::selectedItemSendToBack()$/;"	f	class:MScene	signature:()
MScene::selectedItemSendToBack	MScene.h	/^    void selectedItemSendToBack();$/;"	p	class:MScene	access:public	signature:()
MScene::staticMetaObject	demoUiXml-build-desktop/moc_MScene.cpp	/^const QMetaObject MScene::staticMetaObject = {$/;"	m	class:MScene	file:
MScene::staticMetaObject	iGaME-build-desktop/moc_MScene.cpp	/^const QMetaObject MScene::staticMetaObject = {$/;"	m	class:MScene	file:
MScene::writeXml	MScene.cpp	/^void MScene::writeXml(const QString& fileName)$/;"	f	class:MScene	signature:(const QString& fileName)
MScene::writeXml	MScene.h	/^    void writeXml(const QString& fileName); \/\/&$/;"	p	class:MScene	access:public	signature:(const QString& fileName)
MScene::~MScene	MScene.cpp	/^MScene::~MScene()$/;"	f	class:MScene	signature:()
MScene::~MScene	MScene.h	/^    ~MScene();$/;"	p	class:MScene	access:public	signature:()
MScene_h	MScene.h	12;"	d
MSplashScreen	MSplashScreen.cpp	/^MSplashScreen::MSplashScreen(QWidget* parent)$/;"	f	class:MSplashScreen	signature:(QWidget* parent)
MSplashScreen	MSplashScreen.h	/^    MSplashScreen(QWidget* parent = 0);$/;"	p	class:MSplashScreen	access:public	signature:(QWidget* parent = 0)
MSplashScreen	MSplashScreen.h	/^class MSplashScreen : public QSplashScreen {$/;"	c	inherits:QSplashScreen
MSplashScreen::MSplashScreen	MSplashScreen.cpp	/^MSplashScreen::MSplashScreen(QWidget* parent)$/;"	f	class:MSplashScreen	signature:(QWidget* parent)
MSplashScreen::MSplashScreen	MSplashScreen.h	/^    MSplashScreen(QWidget* parent = 0);$/;"	p	class:MSplashScreen	access:public	signature:(QWidget* parent = 0)
MSplashScreen::getStaticMetaObject	demoUiXml-build-desktop/moc_MSplashScreen.cpp	/^const QMetaObject &MSplashScreen::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MSplashScreen	signature:()
MSplashScreen::getStaticMetaObject	iGaME-build-desktop/moc_MSplashScreen.cpp	/^const QMetaObject &MSplashScreen::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MSplashScreen	signature:()
MSplashScreen::keyPressEvent	MSplashScreen.cpp	/^void MSplashScreen::keyPressEvent(QKeyEvent* event)$/;"	f	class:MSplashScreen	signature:(QKeyEvent* event)
MSplashScreen::keyPressEvent	MSplashScreen.h	/^    void keyPressEvent(QKeyEvent* event);$/;"	p	class:MSplashScreen	access:protected	signature:(QKeyEvent* event)
MSplashScreen::m_pixmap	MSplashScreen.h	/^    QString m_pixmap;$/;"	m	class:MSplashScreen	access:private
MSplashScreen::m_text	MSplashScreen.h	/^    QString m_text;$/;"	m	class:MSplashScreen	access:private
MSplashScreen::m_textAlignment	MSplashScreen.h	/^    int m_textAlignment;$/;"	m	class:MSplashScreen	access:private
MSplashScreen::m_textColor	MSplashScreen.h	/^    QColor m_textColor;$/;"	m	class:MSplashScreen	access:private
MSplashScreen::m_textFont	MSplashScreen.h	/^    QFont m_textFont;$/;"	m	class:MSplashScreen	access:private
MSplashScreen::metaObject	demoUiXml-build-desktop/moc_MSplashScreen.cpp	/^const QMetaObject *MSplashScreen::metaObject() const$/;"	f	class:MSplashScreen	signature:() const
MSplashScreen::metaObject	iGaME-build-desktop/moc_MSplashScreen.cpp	/^const QMetaObject *MSplashScreen::metaObject() const$/;"	f	class:MSplashScreen	signature:() const
MSplashScreen::pixmap	MSplashScreen.h	/^    QString pixmap() { return m_pixmap; }$/;"	f	class:MSplashScreen	access:public	signature:()
MSplashScreen::qt_metacall	demoUiXml-build-desktop/moc_MSplashScreen.cpp	/^int MSplashScreen::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MSplashScreen	signature:(QMetaObject::Call _c, int _id, void **_a)
MSplashScreen::qt_metacall	iGaME-build-desktop/moc_MSplashScreen.cpp	/^int MSplashScreen::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MSplashScreen	signature:(QMetaObject::Call _c, int _id, void **_a)
MSplashScreen::qt_metacast	demoUiXml-build-desktop/moc_MSplashScreen.cpp	/^void *MSplashScreen::qt_metacast(const char *_clname)$/;"	f	class:MSplashScreen	signature:(const char *_clname)
MSplashScreen::qt_metacast	iGaME-build-desktop/moc_MSplashScreen.cpp	/^void *MSplashScreen::qt_metacast(const char *_clname)$/;"	f	class:MSplashScreen	signature:(const char *_clname)
MSplashScreen::renew	MSplashScreen.cpp	/^void MSplashScreen::renew()$/;"	f	class:MSplashScreen	signature:()
MSplashScreen::renew	MSplashScreen.h	/^    void renew();$/;"	p	class:MSplashScreen	access:public	signature:()
MSplashScreen::setPixmap	MSplashScreen.h	/^    void setPixmap(QPixmap pixmap) { QSplashScreen::setPixmap(pixmap); }$/;"	f	class:MSplashScreen	access:public	signature:(QPixmap pixmap)
MSplashScreen::setPixmap	MSplashScreen.h	/^    void setPixmap(QString pixmap) { m_pixmap = pixmap; this->renew(); }$/;"	f	class:MSplashScreen	access:public	signature:(QString pixmap)
MSplashScreen::setText	MSplashScreen.h	/^    void setText(QString text) { m_text = text; this->renew(); }$/;"	f	class:MSplashScreen	access:public	signature:(QString text)
MSplashScreen::setTextAlignment	MSplashScreen.h	/^    void setTextAlignment(int textAlignment) { m_textAlignment = textAlignment; this->renew(); }$/;"	f	class:MSplashScreen	access:public	signature:(int textAlignment)
MSplashScreen::setTextColor	MSplashScreen.h	/^    void setTextColor(QColor textColor) { m_textColor = textColor; this->renew(); }$/;"	f	class:MSplashScreen	access:public	signature:(QColor textColor)
MSplashScreen::setTextFont	MSplashScreen.h	/^    void setTextFont(QFont textFont) { m_textFont = textFont; this->renew(); }$/;"	f	class:MSplashScreen	access:public	signature:(QFont textFont)
MSplashScreen::staticMetaObject	demoUiXml-build-desktop/moc_MSplashScreen.cpp	/^const QMetaObject MSplashScreen::staticMetaObject = {$/;"	m	class:MSplashScreen	file:
MSplashScreen::staticMetaObject	iGaME-build-desktop/moc_MSplashScreen.cpp	/^const QMetaObject MSplashScreen::staticMetaObject = {$/;"	m	class:MSplashScreen	file:
MSplashScreen::text	MSplashScreen.h	/^    QString text() { return m_text; }$/;"	f	class:MSplashScreen	access:public	signature:()
MSplashScreen::textAlignment	MSplashScreen.h	/^    int textAlignment() { return m_textAlignment; }$/;"	f	class:MSplashScreen	access:public	signature:()
MSplashScreen::textColor	MSplashScreen.h	/^    QColor textColor() { return m_textColor; }$/;"	f	class:MSplashScreen	access:public	signature:()
MSplashScreen::textFont	MSplashScreen.h	/^    QFont textFont() { return m_textFont; }$/;"	f	class:MSplashScreen	access:public	signature:()
MSplashScreen::~MSplashScreen	MSplashScreen.cpp	/^MSplashScreen::~MSplashScreen()$/;"	f	class:MSplashScreen	signature:()
MSplashScreen::~MSplashScreen	MSplashScreen.h	/^    ~MSplashScreen();$/;"	p	class:MSplashScreen	access:public	signature:()
MSplashScreen_h	MSplashScreen.h	12;"	d
MView	MView.cpp	/^MView::MView(QWidget* parent)$/;"	f	class:MView	signature:(QWidget* parent)
MView	MView.h	/^    MView(QWidget* parent = 0);$/;"	p	class:MView	access:public	signature:(QWidget* parent = 0)
MView	MView.h	/^class MView : public QGraphicsView {$/;"	c	inherits:QGraphicsView
MView::MView	MView.cpp	/^MView::MView(QWidget* parent)$/;"	f	class:MView	signature:(QWidget* parent)
MView::MView	MView.h	/^    MView(QWidget* parent = 0);$/;"	p	class:MView	access:public	signature:(QWidget* parent = 0)
MView::getStaticMetaObject	demoUiXml-build-desktop/moc_MView.cpp	/^const QMetaObject &MView::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MView	signature:()
MView::getStaticMetaObject	iGaME-build-desktop/moc_MView.cpp	/^const QMetaObject &MView::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MView	signature:()
MView::keyPressEvent	MView.cpp	/^void MView::keyPressEvent(QKeyEvent* event)$/;"	f	class:MView	signature:(QKeyEvent* event)
MView::keyPressEvent	MView.h	/^    void keyPressEvent(QKeyEvent* event);$/;"	p	class:MView	access:protected	signature:(QKeyEvent* event)
MView::keyReleaseEvent	MView.cpp	/^void MView::keyReleaseEvent(QKeyEvent* event)$/;"	f	class:MView	signature:(QKeyEvent* event)
MView::keyReleaseEvent	MView.h	/^    void keyReleaseEvent(QKeyEvent* event);$/;"	p	class:MView	access:protected	signature:(QKeyEvent* event)
MView::metaObject	demoUiXml-build-desktop/moc_MView.cpp	/^const QMetaObject *MView::metaObject() const$/;"	f	class:MView	signature:() const
MView::metaObject	iGaME-build-desktop/moc_MView.cpp	/^const QMetaObject *MView::metaObject() const$/;"	f	class:MView	signature:() const
MView::mouseDoubleClickEvent	MView.cpp	/^void MView::mouseDoubleClickEvent(QMouseEvent* event)$/;"	f	class:MView	signature:(QMouseEvent* event)
MView::mouseDoubleClickEvent	MView.h	/^    void mouseDoubleClickEvent(QMouseEvent* event);$/;"	p	class:MView	access:protected	signature:(QMouseEvent* event)
MView::mouseMoveEvent	MView.cpp	/^void MView::mouseMoveEvent(QMouseEvent* event)$/;"	f	class:MView	signature:(QMouseEvent* event)
MView::mouseMoveEvent	MView.h	/^    void mouseMoveEvent(QMouseEvent* event);$/;"	p	class:MView	access:protected	signature:(QMouseEvent* event)
MView::mousePressEvent	MView.cpp	/^void MView::mousePressEvent(QMouseEvent* event)$/;"	f	class:MView	signature:(QMouseEvent* event)
MView::mousePressEvent	MView.h	/^    void mousePressEvent(QMouseEvent* event);$/;"	p	class:MView	access:protected	signature:(QMouseEvent* event)
MView::mouseReleaseEvent	MView.cpp	/^void MView::mouseReleaseEvent(QMouseEvent* event)$/;"	f	class:MView	signature:(QMouseEvent* event)
MView::mouseReleaseEvent	MView.h	/^    void mouseReleaseEvent(QMouseEvent* event);$/;"	p	class:MView	access:protected	signature:(QMouseEvent* event)
MView::qt_metacall	demoUiXml-build-desktop/moc_MView.cpp	/^int MView::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MView	signature:(QMetaObject::Call _c, int _id, void **_a)
MView::qt_metacall	iGaME-build-desktop/moc_MView.cpp	/^int MView::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MView	signature:(QMetaObject::Call _c, int _id, void **_a)
MView::qt_metacast	demoUiXml-build-desktop/moc_MView.cpp	/^void *MView::qt_metacast(const char *_clname)$/;"	f	class:MView	signature:(const char *_clname)
MView::qt_metacast	iGaME-build-desktop/moc_MView.cpp	/^void *MView::qt_metacast(const char *_clname)$/;"	f	class:MView	signature:(const char *_clname)
MView::staticMetaObject	demoUiXml-build-desktop/moc_MView.cpp	/^const QMetaObject MView::staticMetaObject = {$/;"	m	class:MView	file:
MView::staticMetaObject	iGaME-build-desktop/moc_MView.cpp	/^const QMetaObject MView::staticMetaObject = {$/;"	m	class:MView	file:
MView::~MView	MView.cpp	/^MView::~MView()$/;"	f	class:MView	signature:()
MView::~MView	MView.h	/^    ~MView();$/;"	p	class:MView	access:public	signature:()
MView_h	MView.h	12;"	d
MWidget	MWidget.cpp	/^MWidget::MWidget()$/;"	f	class:MWidget	signature:()
MWidget	MWidget.h	/^    MWidget();$/;"	p	class:MWidget	access:public	signature:()
MWidget	MWidget.h	/^class MWidget : public QGraphicsProxyWidget {$/;"	c	inherits:QGraphicsProxyWidget
MWidget::MWidget	MWidget.cpp	/^MWidget::MWidget()$/;"	f	class:MWidget	signature:()
MWidget::MWidget	MWidget.h	/^    MWidget();$/;"	p	class:MWidget	access:public	signature:()
MWidget::getStaticMetaObject	demoUiXml-build-desktop/moc_MWidget.cpp	/^const QMetaObject &MWidget::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MWidget	signature:()
MWidget::getStaticMetaObject	iGaME-build-desktop/moc_MWidget.cpp	/^const QMetaObject &MWidget::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MWidget	signature:()
MWidget::metaObject	demoUiXml-build-desktop/moc_MWidget.cpp	/^const QMetaObject *MWidget::metaObject() const$/;"	f	class:MWidget	signature:() const
MWidget::metaObject	iGaME-build-desktop/moc_MWidget.cpp	/^const QMetaObject *MWidget::metaObject() const$/;"	f	class:MWidget	signature:() const
MWidget::qt_metacall	demoUiXml-build-desktop/moc_MWidget.cpp	/^int MWidget::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MWidget	signature:(QMetaObject::Call _c, int _id, void **_a)
MWidget::qt_metacall	iGaME-build-desktop/moc_MWidget.cpp	/^int MWidget::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MWidget	signature:(QMetaObject::Call _c, int _id, void **_a)
MWidget::qt_metacast	demoUiXml-build-desktop/moc_MWidget.cpp	/^void *MWidget::qt_metacast(const char *_clname)$/;"	f	class:MWidget	signature:(const char *_clname)
MWidget::qt_metacast	iGaME-build-desktop/moc_MWidget.cpp	/^void *MWidget::qt_metacast(const char *_clname)$/;"	f	class:MWidget	signature:(const char *_clname)
MWidget::staticMetaObject	demoUiXml-build-desktop/moc_MWidget.cpp	/^const QMetaObject MWidget::staticMetaObject = {$/;"	m	class:MWidget	file:
MWidget::staticMetaObject	iGaME-build-desktop/moc_MWidget.cpp	/^const QMetaObject MWidget::staticMetaObject = {$/;"	m	class:MWidget	file:
MWidget::~MWidget	MWidget.cpp	/^MWidget::~MWidget()$/;"	f	class:MWidget	signature:()
MWidget::~MWidget	MWidget.h	/^    ~MWidget();$/;"	p	class:MWidget	access:public	signature:()
MWidget_h	MWidget.h	12;"	d
OBJECTS	Makefile	/^OBJECTS       = demoUiXml.o \\$/;"	m
OBJECTS	demoUiXml-build-desktop/Makefile	/^OBJECTS       = demoUiXml.o \\$/;"	m
OBJECTS	iGaME-build-desktop/Makefile	/^OBJECTS       = iGaME.o \\$/;"	m
OBJECTS_DIR	Makefile	/^OBJECTS_DIR   = .\/$/;"	m
OBJECTS_DIR	demoUiXml-build-desktop/Makefile	/^OBJECTS_DIR   = .\/$/;"	m
OBJECTS_DIR	iGaME-build-desktop/Makefile	/^OBJECTS_DIR   = .\/$/;"	m
QMAKE	Makefile	/^QMAKE         = \/home\/jkdirac\/qtsdk-2010.05\/qt\/bin\/qmake$/;"	m
QMAKE	demoUiXml-build-desktop/Makefile	/^QMAKE         = \/home\/jkdirac\/qtsdk-2010.05\/qt\/bin\/qmake$/;"	m
QMAKE	iGaME-build-desktop/Makefile	/^QMAKE         = \/home\/jkdirac\/qtsdk-2010.05\/qt\/bin\/qmake$/;"	m
QMAKE_TARGET	Makefile	/^QMAKE_TARGET  = demoUiXml$/;"	m
QMAKE_TARGET	demoUiXml-build-desktop/Makefile	/^QMAKE_TARGET  = demoUiXml$/;"	m
QMAKE_TARGET	iGaME-build-desktop/Makefile	/^QMAKE_TARGET  = iGaME$/;"	m
RANLIB	Makefile	/^RANLIB        = $/;"	m
RANLIB	demoUiXml-build-desktop/Makefile	/^RANLIB        = $/;"	m
RANLIB	iGaME-build-desktop/Makefile	/^RANLIB        = $/;"	m
SED	Makefile	/^SED           = sed$/;"	m
SED	demoUiXml-build-desktop/Makefile	/^SED           = sed$/;"	m
SED	iGaME-build-desktop/Makefile	/^SED           = sed$/;"	m
SOURCES	Makefile	/^SOURCES       = demoUiXml.cpp \\$/;"	m
SOURCES	demoUiXml-build-desktop/Makefile	/^SOURCES       = ..\/igameUiMort\/demoUiXml.cpp \\$/;"	m
SOURCES	iGaME-build-desktop/Makefile	/^SOURCES       = ..\/igameUiMort\/iGaME.cpp \\$/;"	m
STRIP	Makefile	/^STRIP         = strip$/;"	m
STRIP	demoUiXml-build-desktop/Makefile	/^STRIP         = strip$/;"	m
STRIP	iGaME-build-desktop/Makefile	/^STRIP         = strip$/;"	m
SYMLINK	Makefile	/^SYMLINK       = ln -f -s$/;"	m
SYMLINK	demoUiXml-build-desktop/Makefile	/^SYMLINK       = ln -f -s$/;"	m
SYMLINK	iGaME-build-desktop/Makefile	/^SYMLINK       = ln -f -s$/;"	m
TAR	Makefile	/^TAR           = tar -cf$/;"	m
TAR	demoUiXml-build-desktop/Makefile	/^TAR           = tar -cf$/;"	m
TAR	iGaME-build-desktop/Makefile	/^TAR           = tar -cf$/;"	m
TARGET	Makefile	/^TARGET        = demoUiXml$/;"	m
TARGET	demoUiXml-build-desktop/Makefile	/^TARGET        = demoUiXml$/;"	m
TARGET	iGaME-build-desktop/Makefile	/^TARGET        = iGaME$/;"	m
alternativeFigure	MItem.h	/^    QString alternativeFigure() { return m_alternativeFigure; }$/;"	f	class:MItem	access:public	signature:()
alternativeFigureColor	MItem.h	/^    QColor alternativeFigureColor() { return m_alternativeFigureColor; }$/;"	f	class:MItem	access:public	signature:()
alternativeImage	MItem.h	/^    QString alternativeImage() { return m_alternativeImage; }$/;"	f	class:MItem	access:public	signature:()
alternativePixmap	MItem.h	/^    QString alternativePixmap() { return m_alternativePixmap; }$/;"	f	class:MItem	access:public	signature:()
alternativeText	MItem.h	/^    QString alternativeText() { return m_alternativeText; }$/;"	f	class:MItem	access:public	signature:()
alternativeTextColor	MItem.h	/^    QColor alternativeTextColor() { return m_alternativeTextColor; }$/;"	f	class:MItem	access:public	signature:()
alternativeTextFont	MItem.h	/^    QFont alternativeTextFont() { return m_alternativeTextFont; }$/;"	f	class:MItem	access:public	signature:()
boundingRect	MItem.cpp	/^QRectF MItem::boundingRect() const$/;"	f	class:MItem	signature:() const
boundingRect	MItem.h	/^    QRectF boundingRect() const;$/;"	p	class:MItem	access:public	signature:() const
category	MItem.h	/^    QString category() { return m_category; }$/;"	f	class:MItem	access:public	signature:()
color	MItem.h	/^    QColor color() { return m_color; }$/;"	f	class:MItem	access:public	signature:()
dataCount	MScene.h	/^    int dataCount;$/;"	m	class:MScene	access:public
dataItem	MScene.h	/^    MItem* dataItem[1024];$/;"	m	class:MScene	access:public
dataScene	MScene.h	/^    MItem* dataScene;$/;"	m	class:MScene	access:public
figure	MItem.h	/^    QString figure() { return m_figure; }$/;"	f	class:MItem	access:public	signature:()
figureColor	MItem.h	/^    QColor figureColor() { return m_figureColor; }$/;"	f	class:MItem	access:public	signature:()
getStaticMetaObject	demoUiXml-build-desktop/moc_MScene.cpp	/^const QMetaObject &MScene::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MScene	signature:()
getStaticMetaObject	demoUiXml-build-desktop/moc_MSplashScreen.cpp	/^const QMetaObject &MSplashScreen::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MSplashScreen	signature:()
getStaticMetaObject	demoUiXml-build-desktop/moc_MView.cpp	/^const QMetaObject &MView::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MView	signature:()
getStaticMetaObject	demoUiXml-build-desktop/moc_MWidget.cpp	/^const QMetaObject &MWidget::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MWidget	signature:()
getStaticMetaObject	iGaME-build-desktop/moc_MScene.cpp	/^const QMetaObject &MScene::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MScene	signature:()
getStaticMetaObject	iGaME-build-desktop/moc_MSplashScreen.cpp	/^const QMetaObject &MSplashScreen::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MSplashScreen	signature:()
getStaticMetaObject	iGaME-build-desktop/moc_MView.cpp	/^const QMetaObject &MView::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MView	signature:()
getStaticMetaObject	iGaME-build-desktop/moc_MWidget.cpp	/^const QMetaObject &MWidget::getStaticMetaObject() { return staticMetaObject; }$/;"	f	class:MWidget	signature:()
handler	MView.cpp	/^int handler(MView*, MScene*, MItem*, QMouseEvent*, QKeyEvent*);$/;"	p	file:	signature:(MView*, MScene*, MItem*, QMouseEvent*, QKeyEvent*)
height	MItem.h	/^    qreal height() { return m_height; }$/;"	f	class:MItem	access:public	signature:()
id	MItem.h	/^    QString id() { return m_id; }$/;"	f	class:MItem	access:public	signature:()
image	MItem.h	/^    QString image() { return m_image; }$/;"	f	class:MItem	access:public	signature:()
isAlternativeFigureAvailable	MItem.h	/^    bool isAlternativeFigureAvailable() { return m_isAlternativeFigureAvailable; }$/;"	f	class:MItem	access:public	signature:()
isAlternativeImageAvailable	MItem.h	/^    bool isAlternativeImageAvailable() { return m_isAlternativeImageAvailable; }$/;"	f	class:MItem	access:public	signature:()
isAlternativePixmapAvailable	MItem.h	/^    bool isAlternativePixmapAvailable() { return m_isAlternativePixmapAvailable; }$/;"	f	class:MItem	access:public	signature:()
isAlternativeTextAvailable	MItem.h	/^    bool isAlternativeTextAvailable() { return m_isAlternativeTextAvailable; }$/;"	f	class:MItem	access:public	signature:()
isFigureVisible	MItem.h	/^    bool isFigureVisible() { return m_isFigureVisible; }$/;"	f	class:MItem	access:public	signature:()
isImageVisible	MItem.h	/^    bool isImageVisible() { return m_isImageVisible; }$/;"	f	class:MItem	access:public	signature:()
isMouseOverSelectable	MItem.h	/^    bool isMouseOverSelectable() { return m_isMouseOverSelectable; }$/;"	f	class:MItem	access:public	signature:()
isMovable	MItem.h	/^    bool isMovable() { return m_isMovable; }$/;"	f	class:MItem	access:public	signature:()
isOutlineAvailable	MItem.h	/^    bool isOutlineAvailable() { return m_isOutlineAvailable; }$/;"	f	class:MItem	access:public	signature:()
isPixmapVisible	MItem.h	/^    bool isPixmapVisible() { return m_isPixmapVisible; }$/;"	f	class:MItem	access:public	signature:()
isSelectable	MItem.h	/^    bool isSelectable() { return m_isSelectable; }$/;"	f	class:MItem	access:public	signature:()
isTextVisible	MItem.h	/^    bool isTextVisible() { return m_isTextVisible; }$/;"	f	class:MItem	access:public	signature:()
itemChange	MItem.cpp	/^QVariant MItem::itemChange(QGraphicsItem::GraphicsItemChange change, const QVariant& value)$/;"	f	class:MItem	signature:(QGraphicsItem::GraphicsItemChange change, const QVariant& value)
itemChange	MItem.h	/^    QVariant itemChange(QGraphicsItem::GraphicsItemChange change, const QVariant& value);$/;"	p	class:MItem	access:protected	signature:(QGraphicsItem::GraphicsItemChange change, const QVariant& value)
keyPressEvent	MSplashScreen.cpp	/^void MSplashScreen::keyPressEvent(QKeyEvent* event)$/;"	f	class:MSplashScreen	signature:(QKeyEvent* event)
keyPressEvent	MSplashScreen.h	/^    void keyPressEvent(QKeyEvent* event);$/;"	p	class:MSplashScreen	access:protected	signature:(QKeyEvent* event)
keyPressEvent	MView.cpp	/^void MView::keyPressEvent(QKeyEvent* event)$/;"	f	class:MView	signature:(QKeyEvent* event)
keyPressEvent	MView.h	/^    void keyPressEvent(QKeyEvent* event);$/;"	p	class:MView	access:protected	signature:(QKeyEvent* event)
keyReleaseEvent	MView.cpp	/^void MView::keyReleaseEvent(QKeyEvent* event)$/;"	f	class:MView	signature:(QKeyEvent* event)
keyReleaseEvent	MView.h	/^    void keyReleaseEvent(QKeyEvent* event);$/;"	p	class:MView	access:protected	signature:(QKeyEvent* event)
loadXml	MScene.cpp	/^void MScene::loadXml(const QString& fileName)$/;"	f	class:MScene	signature:(const QString& fileName)
loadXml	MScene.h	/^    void loadXml(const QString& fileName); \/\/&$/;"	p	class:MScene	access:public	signature:(const QString& fileName)
m_alternativeFigure	MItem.h	/^    QString m_alternativeFigure;$/;"	m	class:MItem	access:private
m_alternativeFigureColor	MItem.h	/^    QColor m_alternativeFigureColor;$/;"	m	class:MItem	access:private
m_alternativeImage	MItem.h	/^    QString m_alternativeImage;$/;"	m	class:MItem	access:private
m_alternativePixmap	MItem.h	/^    QString m_alternativePixmap;$/;"	m	class:MItem	access:private
m_alternativeText	MItem.h	/^    QString m_alternativeText;$/;"	m	class:MItem	access:private
m_alternativeTextColor	MItem.h	/^    QColor m_alternativeTextColor;$/;"	m	class:MItem	access:private
m_alternativeTextFont	MItem.h	/^    QFont m_alternativeTextFont;$/;"	m	class:MItem	access:private
m_category	MItem.h	/^    QString m_category;$/;"	m	class:MItem	access:private
m_color	MItem.h	/^    QColor m_color;$/;"	m	class:MItem	access:private
m_figure	MItem.h	/^    QString m_figure;$/;"	m	class:MItem	access:private
m_figureColor	MItem.h	/^    QColor m_figureColor;$/;"	m	class:MItem	access:private
m_height	MItem.h	/^    qreal m_height;$/;"	m	class:MItem	access:private
m_id	MItem.h	/^    QString m_id;$/;"	m	class:MItem	access:private
m_image	MItem.h	/^    QString m_image;$/;"	m	class:MItem	access:private
m_isAlternativeFigureAvailable	MItem.h	/^    bool m_isAlternativeFigureAvailable;$/;"	m	class:MItem	access:private
m_isAlternativeImageAvailable	MItem.h	/^    bool m_isAlternativeImageAvailable;$/;"	m	class:MItem	access:private
m_isAlternativePixmapAvailable	MItem.h	/^    bool m_isAlternativePixmapAvailable;$/;"	m	class:MItem	access:private
m_isAlternativeTextAvailable	MItem.h	/^    bool m_isAlternativeTextAvailable;$/;"	m	class:MItem	access:private
m_isFigureVisible	MItem.h	/^    bool m_isFigureVisible;$/;"	m	class:MItem	access:private
m_isImageVisible	MItem.h	/^    bool m_isImageVisible;$/;"	m	class:MItem	access:private
m_isMouseOverSelectable	MItem.h	/^    bool m_isMouseOverSelectable;$/;"	m	class:MItem	access:private
m_isMovable	MItem.h	/^    bool m_isMovable;$/;"	m	class:MItem	access:private
m_isOutlineAvailable	MItem.h	/^    bool m_isOutlineAvailable;$/;"	m	class:MItem	access:private
m_isPixmapVisible	MItem.h	/^    bool m_isPixmapVisible;$/;"	m	class:MItem	access:private
m_isSelectable	MItem.h	/^    bool m_isSelectable;$/;"	m	class:MItem	access:private
m_isTextVisible	MItem.h	/^    bool m_isTextVisible;$/;"	m	class:MItem	access:private
m_margin	MItem.h	/^    qreal m_margin;$/;"	m	class:MItem	access:private
m_maxZValue	MScene.h	/^    qreal m_maxZValue;$/;"	m	class:MScene	access:private
m_minZValue	MScene.h	/^    qreal m_minZValue;$/;"	m	class:MScene	access:private
m_name	MItem.h	/^    QString m_name;$/;"	m	class:MItem	access:private
m_outlineColor	MItem.h	/^    QColor m_outlineColor;$/;"	m	class:MItem	access:private
m_outlineStyle	MItem.h	/^    Qt::PenStyle m_outlineStyle;$/;"	m	class:MItem	access:private
m_outlineWidth	MItem.h	/^    int m_outlineWidth;$/;"	m	class:MItem	access:private
m_padding	MItem.h	/^    qreal m_padding;$/;"	m	class:MItem	access:private
m_pixmap	MItem.h	/^    QString m_pixmap;$/;"	m	class:MItem	access:private
m_pixmap	MSplashScreen.h	/^    QString m_pixmap;$/;"	m	class:MSplashScreen	access:private
m_text	MItem.h	/^    QString m_text;$/;"	m	class:MItem	access:private
m_text	MSplashScreen.h	/^    QString m_text;$/;"	m	class:MSplashScreen	access:private
m_textAlignment	MSplashScreen.h	/^    int m_textAlignment;$/;"	m	class:MSplashScreen	access:private
m_textColor	MItem.h	/^    QColor m_textColor;$/;"	m	class:MItem	access:private
m_textColor	MSplashScreen.h	/^    QColor m_textColor;$/;"	m	class:MSplashScreen	access:private
m_textFont	MItem.h	/^    QFont m_textFont;$/;"	m	class:MItem	access:private
m_textFont	MSplashScreen.h	/^    QFont m_textFont;$/;"	m	class:MSplashScreen	access:private
m_width	MItem.h	/^    qreal m_width;$/;"	m	class:MItem	access:private
mainScene	demoUi/demoUiXml.cpp	/^MScene * mainScene;$/;"	m	namespace:uiObjects	file:
mainView	demoUi/demoUiXml.cpp	/^MView * mainView;$/;"	m	namespace:uiObjects	file:
margin	MItem.h	/^    qreal margin() { return m_margin; }$/;"	f	class:MItem	access:public	signature:()
metaObject	demoUiXml-build-desktop/moc_MScene.cpp	/^const QMetaObject *MScene::metaObject() const$/;"	f	class:MScene	signature:() const
metaObject	demoUiXml-build-desktop/moc_MSplashScreen.cpp	/^const QMetaObject *MSplashScreen::metaObject() const$/;"	f	class:MSplashScreen	signature:() const
metaObject	demoUiXml-build-desktop/moc_MView.cpp	/^const QMetaObject *MView::metaObject() const$/;"	f	class:MView	signature:() const
metaObject	demoUiXml-build-desktop/moc_MWidget.cpp	/^const QMetaObject *MWidget::metaObject() const$/;"	f	class:MWidget	signature:() const
metaObject	iGaME-build-desktop/moc_MScene.cpp	/^const QMetaObject *MScene::metaObject() const$/;"	f	class:MScene	signature:() const
metaObject	iGaME-build-desktop/moc_MSplashScreen.cpp	/^const QMetaObject *MSplashScreen::metaObject() const$/;"	f	class:MSplashScreen	signature:() const
metaObject	iGaME-build-desktop/moc_MView.cpp	/^const QMetaObject *MView::metaObject() const$/;"	f	class:MView	signature:() const
metaObject	iGaME-build-desktop/moc_MWidget.cpp	/^const QMetaObject *MWidget::metaObject() const$/;"	f	class:MWidget	signature:() const
mouseDoubleClickEvent	MView.cpp	/^void MView::mouseDoubleClickEvent(QMouseEvent* event)$/;"	f	class:MView	signature:(QMouseEvent* event)
mouseDoubleClickEvent	MView.h	/^    void mouseDoubleClickEvent(QMouseEvent* event);$/;"	p	class:MView	access:protected	signature:(QMouseEvent* event)
mouseMoveEvent	MView.cpp	/^void MView::mouseMoveEvent(QMouseEvent* event)$/;"	f	class:MView	signature:(QMouseEvent* event)
mouseMoveEvent	MView.h	/^    void mouseMoveEvent(QMouseEvent* event);$/;"	p	class:MView	access:protected	signature:(QMouseEvent* event)
mousePressEvent	MView.cpp	/^void MView::mousePressEvent(QMouseEvent* event)$/;"	f	class:MView	signature:(QMouseEvent* event)
mousePressEvent	MView.h	/^    void mousePressEvent(QMouseEvent* event);$/;"	p	class:MView	access:protected	signature:(QMouseEvent* event)
mouseReleaseEvent	MView.cpp	/^void MView::mouseReleaseEvent(QMouseEvent* event)$/;"	f	class:MView	signature:(QMouseEvent* event)
mouseReleaseEvent	MView.h	/^    void mouseReleaseEvent(QMouseEvent* event);$/;"	p	class:MView	access:protected	signature:(QMouseEvent* event)
name	MItem.h	/^    QString name() { return m_name; }$/;"	f	class:MItem	access:public	signature:()
outlineColor	MItem.h	/^    QColor outlineColor() { return m_outlineColor; }$/;"	f	class:MItem	access:public	signature:()
outlineRect	MItem.cpp	/^QRectF MItem::outlineRect() const$/;"	f	class:MItem	signature:() const
outlineRect	MItem.h	/^    QRectF outlineRect() const;$/;"	p	class:MItem	access:public	signature:() const
outlineStyle	MItem.h	/^    Qt::PenStyle outlineStyle() { return m_outlineStyle; }$/;"	f	class:MItem	access:public	signature:()
outlineWidth	MItem.h	/^    int outlineWidth() { return m_outlineWidth; }$/;"	f	class:MItem	access:public	signature:()
padding	MItem.h	/^    qreal padding() { return m_padding; }$/;"	f	class:MItem	access:public	signature:()
paint	MItem.cpp	/^void MItem::paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget*)$/;"	f	class:MItem	signature:(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget*)
paint	MItem.h	/^    void paint(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget);$/;"	p	class:MItem	access:public	signature:(QPainter* painter, const QStyleOptionGraphicsItem* option, QWidget* widget)
painter	MItem.h	/^    QPainter* painter();$/;"	p	class:MItem	access:public	signature:()
painter	MItemPainter.hxx	/^QPainter* MItem::painter()$/;"	f	class:MItem	signature:()
pixmap	MItem.h	/^    QString pixmap() { return m_pixmap; }$/;"	f	class:MItem	access:public	signature:()
pixmap	MSplashScreen.h	/^    QString pixmap() { return m_pixmap; }$/;"	f	class:MSplashScreen	access:public	signature:()
qt_meta_data_MScene	demoUiXml-build-desktop/moc_MScene.cpp	/^static const uint qt_meta_data_MScene[] = {$/;"	v	file:
qt_meta_data_MScene	iGaME-build-desktop/moc_MScene.cpp	/^static const uint qt_meta_data_MScene[] = {$/;"	v	file:
qt_meta_data_MSplashScreen	demoUiXml-build-desktop/moc_MSplashScreen.cpp	/^static const uint qt_meta_data_MSplashScreen[] = {$/;"	v	file:
qt_meta_data_MSplashScreen	iGaME-build-desktop/moc_MSplashScreen.cpp	/^static const uint qt_meta_data_MSplashScreen[] = {$/;"	v	file:
qt_meta_data_MView	demoUiXml-build-desktop/moc_MView.cpp	/^static const uint qt_meta_data_MView[] = {$/;"	v	file:
qt_meta_data_MView	iGaME-build-desktop/moc_MView.cpp	/^static const uint qt_meta_data_MView[] = {$/;"	v	file:
qt_meta_data_MWidget	demoUiXml-build-desktop/moc_MWidget.cpp	/^static const uint qt_meta_data_MWidget[] = {$/;"	v	file:
qt_meta_data_MWidget	iGaME-build-desktop/moc_MWidget.cpp	/^static const uint qt_meta_data_MWidget[] = {$/;"	v	file:
qt_meta_stringdata_MScene	demoUiXml-build-desktop/moc_MScene.cpp	/^static const char qt_meta_stringdata_MScene[] = {$/;"	v	file:
qt_meta_stringdata_MScene	iGaME-build-desktop/moc_MScene.cpp	/^static const char qt_meta_stringdata_MScene[] = {$/;"	v	file:
qt_meta_stringdata_MSplashScreen	demoUiXml-build-desktop/moc_MSplashScreen.cpp	/^static const char qt_meta_stringdata_MSplashScreen[] = {$/;"	v	file:
qt_meta_stringdata_MSplashScreen	iGaME-build-desktop/moc_MSplashScreen.cpp	/^static const char qt_meta_stringdata_MSplashScreen[] = {$/;"	v	file:
qt_meta_stringdata_MView	demoUiXml-build-desktop/moc_MView.cpp	/^static const char qt_meta_stringdata_MView[] = {$/;"	v	file:
qt_meta_stringdata_MView	iGaME-build-desktop/moc_MView.cpp	/^static const char qt_meta_stringdata_MView[] = {$/;"	v	file:
qt_meta_stringdata_MWidget	demoUiXml-build-desktop/moc_MWidget.cpp	/^static const char qt_meta_stringdata_MWidget[] = {$/;"	v	file:
qt_meta_stringdata_MWidget	iGaME-build-desktop/moc_MWidget.cpp	/^static const char qt_meta_stringdata_MWidget[] = {$/;"	v	file:
qt_metacall	demoUiXml-build-desktop/moc_MScene.cpp	/^int MScene::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MScene	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	demoUiXml-build-desktop/moc_MSplashScreen.cpp	/^int MSplashScreen::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MSplashScreen	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	demoUiXml-build-desktop/moc_MView.cpp	/^int MView::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MView	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	demoUiXml-build-desktop/moc_MWidget.cpp	/^int MWidget::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MWidget	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	iGaME-build-desktop/moc_MScene.cpp	/^int MScene::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MScene	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	iGaME-build-desktop/moc_MSplashScreen.cpp	/^int MSplashScreen::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MSplashScreen	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	iGaME-build-desktop/moc_MView.cpp	/^int MView::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MView	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacall	iGaME-build-desktop/moc_MWidget.cpp	/^int MWidget::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:MWidget	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacast	demoUiXml-build-desktop/moc_MScene.cpp	/^void *MScene::qt_metacast(const char *_clname)$/;"	f	class:MScene	signature:(const char *_clname)
qt_metacast	demoUiXml-build-desktop/moc_MSplashScreen.cpp	/^void *MSplashScreen::qt_metacast(const char *_clname)$/;"	f	class:MSplashScreen	signature:(const char *_clname)
qt_metacast	demoUiXml-build-desktop/moc_MView.cpp	/^void *MView::qt_metacast(const char *_clname)$/;"	f	class:MView	signature:(const char *_clname)
qt_metacast	demoUiXml-build-desktop/moc_MWidget.cpp	/^void *MWidget::qt_metacast(const char *_clname)$/;"	f	class:MWidget	signature:(const char *_clname)
qt_metacast	iGaME-build-desktop/moc_MScene.cpp	/^void *MScene::qt_metacast(const char *_clname)$/;"	f	class:MScene	signature:(const char *_clname)
qt_metacast	iGaME-build-desktop/moc_MSplashScreen.cpp	/^void *MSplashScreen::qt_metacast(const char *_clname)$/;"	f	class:MSplashScreen	signature:(const char *_clname)
qt_metacast	iGaME-build-desktop/moc_MView.cpp	/^void *MView::qt_metacast(const char *_clname)$/;"	f	class:MView	signature:(const char *_clname)
qt_metacast	iGaME-build-desktop/moc_MWidget.cpp	/^void *MWidget::qt_metacast(const char *_clname)$/;"	f	class:MWidget	signature:(const char *_clname)
renew	MItem.cpp	/^void MItem::renew()$/;"	f	class:MItem	signature:()
renew	MItem.h	/^    void renew();$/;"	p	class:MItem	access:public	signature:()
renew	MSplashScreen.cpp	/^void MSplashScreen::renew()$/;"	f	class:MSplashScreen	signature:()
renew	MSplashScreen.h	/^    void renew();$/;"	p	class:MSplashScreen	access:public	signature:()
selectedItem	MScene.cpp	/^MItem* MScene::selectedItem() const$/;"	f	class:MScene	signature:() const
selectedItem	MScene.h	/^    MItem* selectedItem() const;$/;"	p	class:MScene	access:public	signature:() const
selectedItemBringToFront	MScene.cpp	/^void MScene::selectedItemBringToFront()$/;"	f	class:MScene	signature:()
selectedItemBringToFront	MScene.h	/^    void selectedItemBringToFront();$/;"	p	class:MScene	access:public	signature:()
selectedItemSendToBack	MScene.cpp	/^void MScene::selectedItemSendToBack()$/;"	f	class:MScene	signature:()
selectedItemSendToBack	MScene.h	/^    void selectedItemSendToBack();$/;"	p	class:MScene	access:public	signature:()
setAlternativeFigure	MItem.h	/^    void setAlternativeFigure(QString alternativeFigure) { m_alternativeFigure = alternativeFigure; setAlternativeFigureAvailable(true); }$/;"	f	class:MItem	access:public	signature:(QString alternativeFigure)
setAlternativeFigureAvailable	MItem.h	/^    void setAlternativeFigureAvailable(bool isAlternativeFigureAvailable) { m_isAlternativeFigureAvailable = isAlternativeFigureAvailable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isAlternativeFigureAvailable)
setAlternativeFigureColor	MItem.h	/^    void setAlternativeFigureColor(QColor alternativeFigureColor) { m_alternativeFigureColor = alternativeFigureColor; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QColor alternativeFigureColor)
setAlternativeImage	MItem.h	/^    void setAlternativeImage(QString alternativeImage) { m_alternativeImage = alternativeImage; setAlternativeImageAvailable(true); }$/;"	f	class:MItem	access:public	signature:(QString alternativeImage)
setAlternativeImageAvailable	MItem.h	/^    void setAlternativeImageAvailable(bool isAlternativeImageAvailable) { m_isAlternativeImageAvailable = isAlternativeImageAvailable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isAlternativeImageAvailable)
setAlternativePixmap	MItem.h	/^    void setAlternativePixmap(QString alternativePixmap) { m_alternativePixmap = alternativePixmap; setAlternativePixmapAvailable(true); }$/;"	f	class:MItem	access:public	signature:(QString alternativePixmap)
setAlternativePixmapAvailable	MItem.h	/^    void setAlternativePixmapAvailable(bool isAlternativePixmapAvailable) { m_isAlternativePixmapAvailable = isAlternativePixmapAvailable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isAlternativePixmapAvailable)
setAlternativeText	MItem.h	/^    void setAlternativeText(QString alternativeText) { m_alternativeText = alternativeText; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QString alternativeText)
setAlternativeTextAvailable	MItem.h	/^    void setAlternativeTextAvailable(bool isAlternativeTextAvailable) { m_isAlternativeTextAvailable = isAlternativeTextAvailable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isAlternativeTextAvailable)
setAlternativeTextColor	MItem.h	/^    void setAlternativeTextColor(QColor alternativeTextColor) { m_alternativeTextColor = alternativeTextColor; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QColor alternativeTextColor)
setAlternativeTextFont	MItem.h	/^    void setAlternativeTextFont(QFont alternativeTextFont) { m_alternativeTextFont = alternativeTextFont; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QFont alternativeTextFont)
setCategory	MItem.h	/^    void setCategory(QString category) { m_category = category; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QString category)
setColor	MItem.h	/^    void setColor(QColor color) { m_color = color; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QColor color)
setFigure	MItem.h	/^    void setFigure(QString figure) { m_figure = figure; setFigureVisible(true); }$/;"	f	class:MItem	access:public	signature:(QString figure)
setFigureColor	MItem.h	/^    void setFigureColor(QColor figureColor) { m_figureColor = figureColor; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QColor figureColor)
setFigureVisible	MItem.h	/^    void setFigureVisible(bool isFigureVisible) { m_isFigureVisible = isFigureVisible; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isFigureVisible)
setHeight	MItem.h	/^    void setHeight(qreal height) { m_height = height; this->renew(); }$/;"	f	class:MItem	access:public	signature:(qreal height)
setId	MItem.h	/^    void setId(QString id) { m_id = id; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QString id)
setImage	MItem.h	/^    void setImage(QString image) { m_image = image; setImageVisible(true); }$/;"	f	class:MItem	access:public	signature:(QString image)
setImageVisible	MItem.h	/^    void setImageVisible(bool isImageVisible) { m_isImageVisible = isImageVisible; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isImageVisible)
setMargin	MItem.h	/^    void setMargin(qreal margin) { m_margin = margin; this->renew(); }$/;"	f	class:MItem	access:public	signature:(qreal margin)
setMouseOverSelectable	MItem.h	/^    void setMouseOverSelectable(bool isMouseOverSelectable) { m_isMouseOverSelectable = isMouseOverSelectable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isMouseOverSelectable)
setMovable	MItem.h	/^    void setMovable(bool isMovable) { m_isMovable = isMovable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isMovable)
setName	MItem.h	/^    void setName(QString name) { m_name = name; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QString name)
setOutlineAvailable	MItem.h	/^    void setOutlineAvailable(bool isOutlineAvailable) { m_isOutlineAvailable = isOutlineAvailable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isOutlineAvailable)
setOutlineColor	MItem.h	/^    void setOutlineColor(QColor outlineColor) { m_outlineColor = outlineColor; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QColor outlineColor)
setOutlineStyle	MItem.h	/^    void setOutlineStyle(Qt::PenStyle outlineStyle) { m_outlineStyle = outlineStyle; this->renew(); }$/;"	f	class:MItem	access:public	signature:(Qt::PenStyle outlineStyle)
setOutlineWidth	MItem.h	/^    void setOutlineWidth(int outlineWidth) { m_outlineWidth = outlineWidth; this->renew(); }$/;"	f	class:MItem	access:public	signature:(int outlineWidth)
setPadding	MItem.h	/^    void setPadding(qreal padding) { m_padding = padding; this->renew(); }$/;"	f	class:MItem	access:public	signature:(qreal padding)
setPixmap	MItem.h	/^    void setPixmap(QString pixmap) { m_pixmap = pixmap; setPixmapVisible(true); }$/;"	f	class:MItem	access:public	signature:(QString pixmap)
setPixmap	MSplashScreen.h	/^    void setPixmap(QPixmap pixmap) { QSplashScreen::setPixmap(pixmap); }$/;"	f	class:MSplashScreen	access:public	signature:(QPixmap pixmap)
setPixmap	MSplashScreen.h	/^    void setPixmap(QString pixmap) { m_pixmap = pixmap; this->renew(); }$/;"	f	class:MSplashScreen	access:public	signature:(QString pixmap)
setPixmapVisible	MItem.h	/^    void setPixmapVisible(bool isPixmapVisible) { m_isPixmapVisible = isPixmapVisible; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isPixmapVisible)
setSelectable	MItem.h	/^    void setSelectable(bool isSelectable) { m_isSelectable = isSelectable; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isSelectable)
setText	MItem.h	/^    void setText(QString text) { m_text = text; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QString text)
setText	MSplashScreen.h	/^    void setText(QString text) { m_text = text; this->renew(); }$/;"	f	class:MSplashScreen	access:public	signature:(QString text)
setTextAlignment	MSplashScreen.h	/^    void setTextAlignment(int textAlignment) { m_textAlignment = textAlignment; this->renew(); }$/;"	f	class:MSplashScreen	access:public	signature:(int textAlignment)
setTextColor	MItem.h	/^    void setTextColor(QColor textColor) { m_textColor = textColor; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QColor textColor)
setTextColor	MSplashScreen.h	/^    void setTextColor(QColor textColor) { m_textColor = textColor; this->renew(); }$/;"	f	class:MSplashScreen	access:public	signature:(QColor textColor)
setTextFont	MItem.h	/^    void setTextFont(QFont textFont) { m_textFont = textFont; this->renew(); }$/;"	f	class:MItem	access:public	signature:(QFont textFont)
setTextFont	MSplashScreen.h	/^    void setTextFont(QFont textFont) { m_textFont = textFont; this->renew(); }$/;"	f	class:MSplashScreen	access:public	signature:(QFont textFont)
setTextVisible	MItem.h	/^    void setTextVisible(bool isTextVisible) { m_isTextVisible = isTextVisible; this->renew(); }$/;"	f	class:MItem	access:public	signature:(bool isTextVisible)
setWidth	MItem.h	/^    void setWidth(qreal width) { m_width = width; this->renew(); }$/;"	f	class:MItem	access:public	signature:(qreal width)
shape	MItem.cpp	/^QPainterPath MItem::shape() const$/;"	f	class:MItem	signature:() const
shape	MItem.h	/^    QPainterPath shape() const;$/;"	p	class:MItem	access:public	signature:() const
staticMetaObject	demoUiXml-build-desktop/moc_MScene.cpp	/^const QMetaObject MScene::staticMetaObject = {$/;"	m	class:MScene	file:
staticMetaObject	demoUiXml-build-desktop/moc_MSplashScreen.cpp	/^const QMetaObject MSplashScreen::staticMetaObject = {$/;"	m	class:MSplashScreen	file:
staticMetaObject	demoUiXml-build-desktop/moc_MView.cpp	/^const QMetaObject MView::staticMetaObject = {$/;"	m	class:MView	file:
staticMetaObject	demoUiXml-build-desktop/moc_MWidget.cpp	/^const QMetaObject MWidget::staticMetaObject = {$/;"	m	class:MWidget	file:
staticMetaObject	iGaME-build-desktop/moc_MScene.cpp	/^const QMetaObject MScene::staticMetaObject = {$/;"	m	class:MScene	file:
staticMetaObject	iGaME-build-desktop/moc_MSplashScreen.cpp	/^const QMetaObject MSplashScreen::staticMetaObject = {$/;"	m	class:MSplashScreen	file:
staticMetaObject	iGaME-build-desktop/moc_MView.cpp	/^const QMetaObject MView::staticMetaObject = {$/;"	m	class:MView	file:
staticMetaObject	iGaME-build-desktop/moc_MWidget.cpp	/^const QMetaObject MWidget::staticMetaObject = {$/;"	m	class:MWidget	file:
text	MItem.h	/^    QString text() { return m_text; }$/;"	f	class:MItem	access:public	signature:()
text	MSplashScreen.h	/^    QString text() { return m_text; }$/;"	f	class:MSplashScreen	access:public	signature:()
textAlignment	MSplashScreen.h	/^    int textAlignment() { return m_textAlignment; }$/;"	f	class:MSplashScreen	access:public	signature:()
textColor	MItem.h	/^    QColor textColor() { return m_textColor; }$/;"	f	class:MItem	access:public	signature:()
textColor	MSplashScreen.h	/^    QColor textColor() { return m_textColor; }$/;"	f	class:MSplashScreen	access:public	signature:()
textFont	MItem.h	/^    QFont textFont() { return m_textFont; }$/;"	f	class:MItem	access:public	signature:()
textFont	MSplashScreen.h	/^    QFont textFont() { return m_textFont; }$/;"	f	class:MSplashScreen	access:public	signature:()
uiObjects	demoUi/demoUiXml.cpp	/^namespace uiObjects {$/;"	n	file:
uiObjects::mainScene	demoUi/demoUiXml.cpp	/^MScene * mainScene;$/;"	m	namespace:uiObjects	file:
uiObjects::mainView	demoUi/demoUiXml.cpp	/^MView * mainView;$/;"	m	namespace:uiObjects	file:
width	MItem.h	/^    qreal width() { return m_width; }$/;"	f	class:MItem	access:public	signature:()
writeXml	MScene.cpp	/^void MScene::writeXml(const QString& fileName)$/;"	f	class:MScene	signature:(const QString& fileName)
writeXml	MScene.h	/^    void writeXml(const QString& fileName); \/\/&$/;"	p	class:MScene	access:public	signature:(const QString& fileName)
~MItem	MItem.cpp	/^MItem::~MItem()$/;"	f	class:MItem	signature:()
~MItem	MItem.h	/^    ~MItem();$/;"	p	class:MItem	access:public	signature:()
~MScene	MScene.cpp	/^MScene::~MScene()$/;"	f	class:MScene	signature:()
~MScene	MScene.h	/^    ~MScene();$/;"	p	class:MScene	access:public	signature:()
~MSplashScreen	MSplashScreen.cpp	/^MSplashScreen::~MSplashScreen()$/;"	f	class:MSplashScreen	signature:()
~MSplashScreen	MSplashScreen.h	/^    ~MSplashScreen();$/;"	p	class:MSplashScreen	access:public	signature:()
~MView	MView.cpp	/^MView::~MView()$/;"	f	class:MView	signature:()
~MView	MView.h	/^    ~MView();$/;"	p	class:MView	access:public	signature:()
~MWidget	MWidget.cpp	/^MWidget::~MWidget()$/;"	f	class:MWidget	signature:()
~MWidget	MWidget.h	/^    ~MWidget();$/;"	p	class:MWidget	access:public	signature:()
